package graph;

import java.util.Iterator;

public class GraphSearch {

	private Graph graph;
	private boolean marked[];
	private int arriveBy[];
	private int connectedSet[];
	private int numberOfConnectedSet = 0;
	private int distanceOfInitialNode[];
	
	
	public GraphSearch(Graph g) {
		this.graph = g;
		this.marked = new boolean[g.getV()];
		for(int i=0; i<g.getV(); i++) {
			this.marked[i]=false;
		}
		this.arriveBy = new int[g.getV()];
		this.connectedSet = new int [g.getV()];
		this.distanceOfInitialNode = new int [g.getV()];

	}
	
	private void visitAllNodesByDfs() {
		for (int i=0; i<this.graph.getV(); i++) {
			if (this.marked[i]==false) {
				this.numberOfConnectedSet++;				
				this.arriveBy[i] = i;
				this.distanceOfInitialNode[i]=0;
				visitConnectedSetByDfs(i);				
			}
		}
	}
	
	private void visitConnectedSetByDfs(int vIndex, int totalDistanceOfInitialNode) {
		
		//****  VISITA *************
		this.marked[vIndex] = true;
		this.connectedSet[vIndex] = this.numberOfConnectedSet;
		 = totalDistanceOfInitialNode;

		System.out.println("visiting " + vIndex + " no set=" + this.connectedSet[vIndex] + " by vertex " + this.arriveBy[vIndex]
				+ ", distance of root vertex=" + this.distanceOfInitialNode[vIndex]);		
		
		
		//Processamento dos próximos vértices
		Iterator<Integer> iterator = this.graph.getAdj(vIndex);
		while (iterator.hasNext()) {
			int v2Index = iterator.next();
			
			//ainda não visitou esse vertice
			if (this.marked[v2Index]==false) {
				this.arriveBy[v2Index] = vIndex;
				totalDistanceOfInitialNode++;
				visitConnectedSetByDfs(v2Index, totalDistanceOfInitialNode);
			}			
		}
	}
	
	
	public static void main(String args[]) {
		GraphSearch dfs = new GraphSearch(new Graph("graph.txt"));
		dfs.visitAllNodesByDfs();
		
		
	}

}
