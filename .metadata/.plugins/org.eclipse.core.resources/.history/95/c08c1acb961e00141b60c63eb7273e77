
public class FindSubstring {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String s = "abc";
		String txt = "abcfadfsfagabcfdfd";
		
		FindSubstring fs = new FindSubstring();
		
		System.out.println("indice=" + fs.findSubstring(s, txt));
		
	}

	/*
	 * Retorna o indice de inicio da substring no texto
	 */
	public int findSubstring (String s, String txt) {
		FindSubstring.RollingHash rs = new RollingHash(s);
		RollingHash rSubtxt = new RollingHash(txt.substring(0,s.length()));
		int result=-1;
		
		for (int i=0; i< (txt.length()-s.length()+1); i++) {
			int sHash = rs.hashCode();	
			int subTxtHash = rSubtxt.hashCode();
			if (sHash==subTxtHash) {
				System.out.println("hash igual em i=" + i);
				break;
			}
		}
		return 0;
	}
		
	
		

	
	class RollingHash {

		private String txt;
		private int hashValue;
		final int modNumber = 10;
		
		public RollingHash(String txt) {
			this.txt=txt;
			this.calculateHash();
		}
		
		private void calculateHash() {			
			int totalValue = 0;
			for (int i=0; i<this.txt.length(); i++) {
				char iChar = this.txt.charAt(i);
				int numericValue = iChar;
//				System.out.println("char=" + iChar + " nv=" + numericValue);
				totalValue += numericValue;
			}
			this.hashValue = totalValue % modNumber;
			System.out.println("txt=" + txt + " total=" + totalValue + " hash=" + hashValue);
		}


		public void append(char c) {
			this.txt+=c;
			this.hashValue = (this.hashValue+c)%modNumber;
		}
		
		public void pop(){
			char c = this.txt.charAt(0);
			this.txt = this.txt.substring(1);
			this.hashValue = (this.hashValue-c)%modNumber;
		}
		
		public int rollingHash() {
			return hashValue;
		}
	}	
	
}



