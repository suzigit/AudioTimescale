
public class Heap {
	
	private int numbers[] = {1,4,7,10,2,7,9,11,0,13,6,3,8,5};
	
	public void createHeap() {
		for (int i=numbers.length/2+1;i>=0;i--) {
			heapfy(i,numbers.length-1);
		}		
	}
	
	private void heapfy(int index, int indexLastElement) {
				
		while (this.hasLeftChildren(index, indexLastElement)) { 
//			System.out.println ("heapfy index= " + index + " numbers = "+  this.toString());		
	
			if (this.hasRightChildren(index, indexLastElement)) {
				//Compara atual com valores dos 2 filhos
				int indexMaxValue = this.getIndexMaxValue(this.getIndexLeftChildren(index), this.getIndexRightChildren(index));
				if (numbers[index]< numbers[indexMaxValue]) {
					this.changeValuePosition(index,indexMaxValue);
					index = indexMaxValue;
//					System.out.println ("max index= " + index);							
				}
				else {
					break;
				}
			} else if (this.hasLeftChildren(index, indexLastElement)) {
				//Compara atual com valor de único filho
				if (numbers[index]< numbers[this.getIndexLeftChildren(index)]) {
					this.changeValuePosition(index,this.getIndexLeftChildren(index));
					index = this.getIndexLeftChildren(index);
//					System.out.println ("só filho esq= " + index);							
				}
				else {
					break;
				}
				
			}
			else {
				break;
			}
		}
	}
	
	private int getIndexMaxValue(int index1, int index2) {
		int maxIndex = index1;
		if (this.numbers[index1] < this.numbers[index2]) {
			maxIndex = index2;
		}
		return maxIndex;
	}
	
	private int getIndexLeftChildren(int index) {
		return (2*index)+1;
	}
	
	private int getIndexRightChildren(int index) {
		return 2*index+2;
	}
	
	private boolean hasLeftChildren(int index, int indexLastElement) {
		int indexLeftChildren = this.getIndexLeftChildren(index);
		return (indexLeftChildren < indexLastElement);
	}
	
	private boolean hasRightChildren(int index, int indexLastElement) {
		int indexRightChildren = this.getIndexRightChildren(index);
		return (indexRightChildren < indexLastElement);
	}
	
	private void changeValuePosition(int index1, int index2) {
		int valueTemp = numbers[index1];
		numbers[index1]=numbers[index2];
		numbers[index2]=valueTemp;
		//System.out.println ("chnges index1= " + index1 + " com index 2=" + index2);		

	}
	
	public void heapSort () {
		this.createHeap();
		System.out.println ("****numbers heap criado = " + this.toString());		
		int indexLastElement = numbers.length-1;
		while (indexLastElement>1) {
			System.out.println ("ordenacao com indexLast= " + indexLastElement + " heap= " + this.toString());		
			this.changeValuePosition(0, indexLastElement);
			indexLastElement--;
			this.heapfy(0,indexLastElement);
		}
	}
	
	public String toString() {
		String txtHeap = "";
		for(int i=0; i<this.numbers.length; i++) {
			txtHeap += this.numbers[i] + ", "; 
		}
		return txtHeap;
	}
	
	public static void main (String[] args) {
		Heap heap = new Heap();
		System.out.println ("numbers original= " + heap.toString());
		heap.heapSort();
		System.out.println ("numbers final = " + heap.toString());		
		
	}

}
